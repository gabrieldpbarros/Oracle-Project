import streamlit as st

VALID_ARCH_TYPES = [
    "Site", "Youtube", "PDF", "CSV", "TXT"
]

VALID_PROVIDERS = {"Groq": {"models": ["llama-3.3-70b-versatile", "llama-3.1-8b-instant", "openai/gpt-oss-120b", "openai/gpt-oss-20b"]},
                   "OpenAI": {"models": ["gpt-4o-mini", "gpt-oss-120b", "gpt-oss-20b"]}}

def chat_page():
    """
        ESTRUTURA DE CHAT

        Engloba o t√≠tulo de sauda√ß√£o e o funcionamento do chat (mem√≥ria e mensagens aparecendo)
    """
    # T√≠tulo que aparece na p√°gina principal (par√¢metro 'divider' coloca uma divis√≥ria abaixo do t√≠tulo)
    st.header("üëæ Welcome to your personal Oracle!", divider=True)

    # Esse √© o formato de "messages" 
    # EX_MESSAGE = [
    #     ("user", "Hello!"), # (role, content)
    #     ("assistant", "What's up?"),
    #     ("user", "Not much.")
    # ]

    # Session state √© a mem√≥ria do Streamlit 
    messages = st.session_state.get("messages", []) # retorna uma lista vazia se n√£o encontrar mensagens anteriores
    for message in messages:
        chat = st.chat_message(message[0]) # formata√ß√£o de chat (role)
        chat.markdown(message[1]) # escreve no chat criado (conte√∫do)

    user_input = st.chat_input("Write here")
    if user_input:
        messages.append(("user", user_input)) # salva a mensagem na lista de tuplas
        st.session_state["messages"] = messages # salva na mem√≥ria do Streamlit
        st.rerun() # roda a fun√ß√£o novamente

def sidebar():
    """
        ESTRUTURA DE SIDEBAR

        Inclui duas abas principais, uma de upload de arquivos e outra de sele√ß√£o do modelo.

        A primeira aba inclui a sele√ß√£o do formato que ser√° utilizado e caixa de texto/bot√£o
        de upload para anexar a fonte.

        A segunda aba engoloba a se√ß√£o do modelo que o usu√°rio vai escolher para compor o
        Or√°culo.
    """
    tabs = st.tabs(["Archive Upload", "Model Selection"])
    # Editamos a primeira aba (upload de arquivos)
    with tabs[0]:
        arch_type = st.selectbox("Select the archive type", VALID_ARCH_TYPES)
        # Sele√ß√£o de formato de envio dos arquivos
        if (arch_type == "Site" or arch_type == "Youtube"):
            arch = st.text_input("URL")
        if (arch_type == "PDF"):
            arch = st.file_uploader("Upload", type=[".pdf"])
        if (arch_type == "CSV"):
            arch = st.file_uploader("Upload", type=[".csv"])
        if (arch_type == "TXT"):
            arch = st.file_uploader("Upload", type=[".txt"])

    # Editamos a segunda aba (sele√ß√£o do LLM)
    with tabs[1]:
        provider = st.selectbox("Select the provider", VALID_PROVIDERS.keys())
        model = st.selectbox("Select the model", VALID_PROVIDERS[provider]["models"])
        api_key = st.text_input(
            f"Insert your API key for {provider}",
            value=st.session_state.get(f"api_key_{provider}"))

        # Armazena na mem√≥ria do Streamlit o valor inserido na caixa de texto da chave da API
        st.session_state[f"api_key_{provider}"] = api_key # salva uma vari√°vel chamada "api_key_{provedor}" na mem√≥ria

def main():
    chat_page()
    with st.sidebar: # tudo que estiver dentro deste m√©todo vai ser exibido na sidebar do Streamlit
        sidebar() # modelo que constru√≠mos

if __name__ == "__main__":
    main()